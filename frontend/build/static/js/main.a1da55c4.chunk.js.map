{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/Chatbox.js","components/ChatLoading.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","Signup","handleClick","name","setName","isMale","setIsMale","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","as","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","suggestChatPrompt","setSuggestChatPrompt","analyzeChatPrompt","setAnalyzeChatPrompt","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","fetchMessages","Authorization","token","get","emit","handleChatSuggestion","preventDefault","chatId","prompt","aiChatSuggestionResponse","handleAnalyzeChat","aiChatAnalyzeResponse","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","pb","px","ArrowBack","isGroupChat","chatName","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","onSubmit","flex","Chatbox","ChatLoading","height","MyChats","setLoggedUser","fetchChats","color","py","latestMessage","substring","SideDrawer","count","effect","Effect","SCALE","Bell","pl","notif","filter","n","Button","rightIcon","ChevronDown","removeItem","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1da55c4.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { RadioGroup, Radio } from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [isMale, setIsMale] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          isMale,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl as=\"fieldset\" id=\"isMale\" isRequired>\n        <FormLabel as=\"legend\">Gender</FormLabel>\n        <RadioGroup onChange={(value) => setIsMale(value)}>\n          <HStack spacing=\"24px\">\n            <Radio value=\"true\">Male</Radio>\n            <Radio value=\"false\">Female</Radio>\n          </HStack>\n        </RadioGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          AI-converse\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport {\n  IconButton,\n  Spinner,\n  useToast,\n  Button,\n  ButtonGroup,\n} from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:8080\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [suggestChatPrompt, setSuggestChatPrompt] = useState(\n    \"As a dating coach, suggest a next possible intersting chat, between the user and their match. give me a crisp intersting chat as response only.\"\n  );\n  const [analyzeChatPrompt, setAnalyzeChatPrompt] = useState(\n    \"As a dating coach, analyze the following conversation between the user and their match. Identify strengths, weaknesses, and provide suggestions for improvement in very brief.\"\n  );\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const handleChatSuggestion = async (e) => {\n    try {\n      e.preventDefault(); // Prevent page refresh\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const aiChatSuggestionResponse = await axios.post(\n        \"/api/ai/get/chat/suggestion\",\n        {\n          chatId: selectedChat._id,\n          prompt: suggestChatPrompt,\n        },\n        config\n      );\n      setNewMessage(aiChatSuggestionResponse.data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to send the Message to ai\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n  const handleAnalyzeChat = async (e) => {\n    try {\n      e.preventDefault(); // Prevent page refresh\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const aiChatAnalyzeResponse = await axios.post(\n        \"/api/ai/get/chat/analyze\",\n        {\n          chatId: selectedChat._id,\n          prompt: analyzeChatPrompt,\n        },\n        config\n      );\n      toast({\n        title: \"Chat analyzed successfully!\",\n        description: aiChatAnalyzeResponse.data,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to send the Message to ai\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const handleSuggestionPromptChange = (e) => {\n    setSuggestChatPrompt(e.target.value);\n  };\n\n  const handleAnalyzePromptChange = (e) => {\n    setAnalyzeChatPrompt(e.target.value);\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  {/* <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  /> */}\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n\n            <form onSubmit={handleChatSuggestion}>\n              <FormControl\n                id=\"chat-suggestion\"\n                mt={3}\n                isRequired\n                display=\"flex\"\n                alignItems=\"center\"\n              >\n                <Input\n                  variant=\"filled\"\n                  bg=\"#E0E0E0\"\n                  value={suggestChatPrompt}\n                  onChange={handleSuggestionPromptChange}\n                  flex=\"1\" // Make input take remaining width\n                  mr={2} // Add some margin between the input and button\n                />\n                <Button type=\"submit\" mt={0} colorScheme=\"blue\">\n                  Submit Suggestion\n                </Button>\n              </FormControl>\n            </form>\n\n            <form onSubmit={handleAnalyzeChat}>\n              <FormControl\n                id=\"chat-suggestion\"\n                mt={3}\n                isRequired\n                display=\"flex\"\n                alignItems=\"center\"\n              >\n                <Input\n                  variant=\"filled\"\n                  bg=\"#E0E0E0\"\n                  value={analyzeChatPrompt}\n                  onChange={handleAnalyzePromptChange}\n                  flex=\"1\" // Make input take remaining width\n                  mr={2} // Add some margin between the input and button\n                />\n                <Button type=\"submit\" mt={0} colorScheme=\"blue\">\n                  Analyze Chat\n                </Button>\n              </FormControl>\n            </form>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"fetch chat user info: \", user);\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    // if (!search) {\n    //   toast({\n    //     title: \"Please Enter something in search\",\n    //     status: \"warning\",\n    //     duration: 5000,\n    //     isClosable: true,\n    //     position: \"top-left\",\n    //   });\n    //   return;\n    // }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}